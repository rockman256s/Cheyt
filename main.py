import streamlit as st
import plotly.graph_objects as go
import pandas as pd

from interpolation import linear_interpolation, quadratic_interpolation, get_interpolation_curve
from utils import validate_input, validate_points
from database import init_db, add_calibration_point, get_all_points, clear_all_points

# Initialize database
init_db()

# Page configuration
st.set_page_config(
    page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–µ—Å–∞",
    layout="centered",
    initial_sidebar_state="collapsed"
)

# Custom CSS for mobile optimization
st.markdown("""
    <style>
        .stButton > button {
            width: 100%;
            height: 3rem;
            margin-top: 1rem;
        }
        .stNumberInput > div > div > input {
            height: 3rem;
        }
        @media (max-width: 640px) {
            .main > div {
                padding-left: 0.5rem;
                padding-right: 0.5rem;
            }
        }
    </style>
""", unsafe_allow_html=True)

st.title("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–µ—Å–∞")

# Calibration section in a card-like container
with st.container():
    st.markdown("""
        <div style='background-color: #f0f2f6; padding: 1rem; border-radius: 0.5rem;'>
            <h3>–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞</h3>
        </div>
    """, unsafe_allow_html=True)

    col1, col2 = st.columns(2)
    with col1:
        pressure = st.number_input("–î–∞–≤–ª–µ–Ω–∏–µ:", 
                                 min_value=0.0, 
                                 format="%.2f",
                                 help="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è")
    with col2:
        weight = st.number_input("–í–µ—Å:", 
                               min_value=0.0, 
                               format="%.2f",
                               help="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞")

    if st.button("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É", use_container_width=True):
        is_valid, error_message = validate_input(str(pressure), str(weight))
        if is_valid:
            if add_calibration_point(pressure, weight):
                st.success("‚úÖ –¢–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ—á–∫–∏")
        else:
            st.error(error_message)

# Display current calibration points
points = get_all_points()
if points:
    st.markdown("""
        <div style='background-color: #f0f2f6; padding: 1rem; border-radius: 0.5rem; margin-top: 1rem;'>
            <h3>–¢–µ–∫—É—â–∏–µ —Ç–æ—á–∫–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏</h3>
        </div>
    """, unsafe_allow_html=True)

    df = pd.DataFrame(points, columns=["–î–∞–≤–ª–µ–Ω–∏–µ", "–í–µ—Å"])
    st.dataframe(df, use_container_width=True)

    # Plot calibration curve with mobile-optimized layout
    x_curve, y_curve = get_interpolation_curve(points)
    fig = go.Figure()

    # Add calibration points
    fig.add_trace(go.Scatter(
        x=[p[0] for p in points],
        y=[p[1] for p in points],
        mode='markers',
        name='–¢–æ—á–∫–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏',
        marker=dict(size=10)
    ))

    # Add interpolation curve
    fig.add_trace(go.Scatter(
        x=x_curve,
        y=y_curve,
        mode='lines',
        name='–ö—Ä–∏–≤–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏',
        line=dict(width=2)
    ))

    fig.update_layout(
        title="–ì—Ä–∞—Ñ–∏–∫ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏",
        xaxis_title="–î–∞–≤–ª–µ–Ω–∏–µ",
        yaxis_title="–í–µ—Å",
        height=300,  # –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        margin=dict(l=10, r=10, t=40, b=10),  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        ),
        showlegend=True
    )
    st.plotly_chart(fig, use_container_width=True)

# Weight calculation section
st.markdown("""
    <div style='background-color: #f0f2f6; padding: 1rem; border-radius: 0.5rem; margin-top: 1rem;'>
        <h3>–†–∞—Å—á–µ—Ç –≤–µ—Å–∞</h3>
    </div>
""", unsafe_allow_html=True)

calc_pressure = st.number_input("–í–≤–µ–¥–∏—Ç–µ –¥–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:", 
                              format="%.2f",
                              help="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–µ—Å–∞")

if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å", use_container_width=True):
    if points:
        is_valid, error_message = validate_points(points)
        if is_valid:
            if len(points) == 2:
                result = linear_interpolation(calc_pressure, points)
                method = "–ª–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è"
            else:
                result = quadratic_interpolation(calc_pressure, points)
                method = "–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è"

            st.success(f"üí´ –†–∞—Å—á–µ—Ç–Ω—ã–π –≤–µ—Å: {result:.2f} ({method})")

            # Check if extrapolating
            min_pressure = min(p[0] for p in points)
            max_pressure = max(p[0] for p in points)
            if calc_pressure < min_pressure or calc_pressure > max_pressure:
                st.warning(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è ({calc_pressure}) –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ ({min_pressure:.1f} - {max_pressure:.1f})")
        else:
            st.error(error_message)
    else:
        st.error("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ç–æ—á–∫–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏")

# Clear calibration with confirmation dialog
if st.button("–û—á–∏—Å—Ç–∏—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∫—É", use_container_width=True):
    if st.button("‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—á–∏—Å—Ç–∫—É", use_container_width=True):
        if clear_all_points():
            st.success("üóëÔ∏è –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –æ—á–∏—â–µ–Ω–∞")
        else:
            st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏")